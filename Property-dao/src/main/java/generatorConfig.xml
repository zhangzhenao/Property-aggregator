<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>
<!-- 指定数据连接驱动jar地址  必须 绝对路径 -->  
    <classPathEntry location="G:\JavaJar\mysql-connector-java-5.1.38.jar" /> 
	<context id="mysql" defaultModelType="hierarchical" targetRuntime="MyBatis3Simple" >

	    <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
	        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
	     --> 
	    <property name="autoDelimitKeywords" value="false"/>
	    <!-- 生成的Java文件的编码 -->
	    <property name="javaFileEncoding" value="UTF-8"/>
	    <!-- 格式化java代码 -->
	    <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
	    <!-- 格式化XML代码 -->
	    <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
	
	    <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
	    <property name="beginningDelimiter" value="`"/>
	    <property name="endingDelimiter" value="`"/>
	    
		<!-- 自动序列号  （还不可用，需要扩展插件）
		<plugin type="java.io.Serializable" /> -->
		
		
		
		<!-- 注释 -->  
        <commentGenerator >  
            <property name="suppressAllComments" value="true"/><!-- 是否取消注释 -->  
            <property name="suppressDate" value="true" /> <!-- 是否生成注释代时间戳-->  
        </commentGenerator> 
	        
	    <!-- 必须要有的，使用这个配置链接数据库
	        @TODO:是否可以扩展
	     -->
	    <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://127.0.0.1:3306/pms?characterEncoding=utf-8" userId="root" password="root">
	        <!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 -->
	    </jdbcConnection>
	
	    
	
	
	    <!-- java模型创建器，是必须要的元素
	        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
	        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
	        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录  一般都是src
	     -->
	    <javaModelGenerator targetPackage="org.property.pojo" targetProject="Property-dao" >
	    </javaModelGenerator>
	
	
	    <!-- 生成SQL map的XML文件生成器，
	        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
	            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
	        targetPackage/targetProject:同javaModelGenerator
	     
	    <sqlMapGenerator targetPackage="org.Chapter3.Mappers" targetProject="Chapter3">-->
	        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false 
	        <property name="enableSubPackages" value="true"/>
	    </sqlMapGenerator>-->
	
	
	    <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 
	        targetPackage/targetProject:同javaModelGenerator
	        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
	            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
	            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
	            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
	        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
	   
	    <javaClientGenerator targetPackage="org.Chapter3.Dao" type="XMLMAPPER" targetProject="Chapter3"> -->
	        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false 
	        <property name="enableSubPackages" value="true"/>
	    </javaClientGenerator> -->
	
	
	
	
	    <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
	        选择的table会生成一下文件：
	        1，SQL map文件
	        2，生成一个主键类；
	        3，除了BLOB和主键的其他字段的类；
	        4，包含BLOB的类；
	        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
	        6，Mapper接口（可选）
	
	        tableName（必要）：要生成对象的表名；
	        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
	            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
	            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
	            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
	            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
	            4，否则，使用指定的大小写格式查询；
	        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
	        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；
	
	        可选：
	        1，schema：数据库的schema；
	        2，catalog：数据库的catalog；
	        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
	        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
	        5，enableInsert（默认true）：指定是否生成insert语句；
	        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
	        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
	        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
	        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
	        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
	        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
	        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
	        13，modelType：参考context元素的defaultModelType，相当于覆盖；
	        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
	        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性
	
	        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
	     -->
	     <!--tableName:数据库表名，  domainObjectName ：自定义实体类名  -->
	    <table tableName="admin" domainObjectName="Admin">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
		<table tableName="baoan" domainObjectName="Baoan">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	   
	    <table tableName="dandong" domainObjectName="Dandong">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	     <table tableName="dictionary" domainObjectName="Dictionary">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="fangchan" domainObjectName="Fangchan">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="fangjian" domainObjectName="Fangjian">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="huodong" domainObjectName="Huodong">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    <table tableName="kaifashang" domainObjectName="Kaifashang">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="louceng" domainObjectName="Louceng">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="permission" domainObjectName="Permission">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="role" domainObjectName="Role">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="role_quanxian" domainObjectName="RoleQuanxian">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="role_user" domainObjectName="RoleUser">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="sheshi" domainObjectName="Sheshi">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="shigu" domainObjectName="Shigu">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="xinjian" domainObjectName="Xinjian">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="xuncha" domainObjectName="Xuncha">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="yanfang" domainObjectName="Yanfang">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="yanlian" domainObjectName="Yanlian">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="yezhubiao" domainObjectName="Yezhubiao">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="yijian" domainObjectName="Yijian">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="zhiqin" domainObjectName="Zhiqin">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="zhuangxiu" domainObjectName="Zhuangxiu">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	    
	    <table tableName="zigongsi" domainObjectName="Zigongsi">
	    	<!--把数据库列名下划线换成驼峰命名法  -->
			<property name="useActualColumnNames" value="false"/>
	    </table>
	</context>
</generatorConfiguration>